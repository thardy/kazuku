capture:
  server\openapi.yml:
    # üîß Runnable example with simple get requests. 
    # Run with "optic capture server\openapi.yml --update interactive" 
    # You can change the server and the 'requests' section to experiment
    server:
#      command: npm start # start your server
      url: http://localhost:3001 # the url where it runs
    requests:
      run:
        # The command that will generate traffic to the Optic proxy
        command: npm run winApiTest
        # üîß OPTIC_PROXY is added to your command's env and contains the URL of an Optic's local reverse proxy. Your command should send its requests to this URL.
        proxy_variable: OPTIC_PROXY
#    requests:
#      send:
#        - path: /users/mojombo
#          method: GET
#        - path: /users/defunkt
#          method: GET
#        - path: /users/pjhyett/repos
#          method: GET
#        - path: /users/pjhyett/followers
#          method: GET
#        - path: /orgs/opticdev/repos
#          method: GET
#        - path: /orgs/facebook/repos
#          method: GET
#        - path: /orgs/opticdev/repos
#          method: GET
#        - path: /orgs/facebook/repos
#          method: GET
#        - path: /orgs/github/repos
#          method: GET
    # When you are ready, set up an actual integration that run your test suite
    # Read reference docs here: https://www.useoptic.com/docs/capturing-traffic#configuration-reference
    # server:
    #   # üîß Update this to the command to run your server.
    #   # Optional: If omitted, Optic assumes the server is running or started elsewhere.
    #   command: npm dev 
    #   # üîß Update this url to where your server can be reached.
    #   url: http://localhost:8080
    # requests:
    #   # ‚ÑπÔ∏è Requests should be sent to the Optic proxy, the address of which is injected into 'run.command's env as OPTIC_PROXY (or the value of 'run.proxy_variable').
    #   run:
    #     # üîß Specify a command that will generate traffic
    #     command: test
    #     # üîß OPTIC_PROXY is added to your command's env and contains the URL of an Optic's local reverse proxy. Your command should send its requests to this URL.
    #     proxy_variable: OPTIC_PROXY

#capture:
#  openapi.yml:
#    server:
#      command: npm start
#      url: http://localhost:3001 # the url where it runs
#      ready_endpoint: /
#      ready_timeout: 10_000
#    requests:
#      run:
#        # The command that will generate traffic to the Optic proxy
#        command: npm run winApiTest
#        # The name of the environment variable injected into the env of the command that contains the address of the Optic proxy.
#        # Optional: default: OPTIC_PROXY
#        proxy_variable: OPTIC_PROXY
